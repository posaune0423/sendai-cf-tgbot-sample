# cursor.rules (TypeScript/Cloudflare Workers/LangGraph/LangChain specific)

## General Principles

- Write concise, functional, modular code.
- Use biome for linting and formatting.
- Avoid unnecessary classes; prefer functions and modularization.
- Use boolean-style variable naming (isActive, hasPermission).
- Directory/file naming: lowercase-with-dashes (e.g., routers/user-routes.ts).
- Use explicit, named exports for functions and modules.

## Cloudflare Workers

- Define routes declaratively with clear async handler functions.
- Minimize global state; prefer environment bindings.
- Optimize performance: async I/O, caching (KV/Cache API).
- Handle errors explicitly with custom Responses.

## LangGraph & LangChain (TypeScript via LangChain.js)

- Structure AI agents clearly: reasoning → planning → tool calling → feedback loop.
- Keep agent schemas explicit (use Zod or Valibot schemas; avoid loose types like arrays).
- Implement agent actions explicitly using Tool-calling patterns.
- Favor simple workflows; escalate complexity only when essential (routing, orchestration).

## AI Agent Design Patterns (Anthropic & Agent Design Patterns adapted)

- Prefer simplicity (Prompt Chaining, Routing).
- Introduce complexity (Orchestrator-Workers, Evaluator-Optimizer, Reflection) only as needed.
- Balance deterministic and dynamic flows (Custom Workflow pattern).
- Clearly separate roles and responsibilities for multi-agent systems.

## Evaluation & Continuous Improvement

- Continuously evaluate outputs and intermediate artifacts (prompts, plans, tool calls).
- Combine offline (benchmarks, tests) and online evaluations (logs, user feedback).
- Regularly update evaluation plans based on online data.

## Directory Structure

```bash
src/
├── agents/ # Individual agent implementations
├── helper/ # Helper utilities and examples
├── lib/ # Library code
├── prompts/ # Agent prompts and templates
├── tools/ # Custom tools for agents
└── utils/ # Utility functions and configurations
```

## Schema Validation (Zod example)

```typescript
const userActionSchema = z.object({
  userId: z.string().uuid(),
  actionType: z.enum(['CREATE', 'UPDATE', 'DELETE']),
})
```
